// Code generated by protoc-gen-go-grpc-client. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc-client v1.2.0
// - protoc             v3.12.4
// source: function.proto

package function

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc-client package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HandleEventClient is the client API for HandleEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandleEventClient interface {
	// handle a event
	ProcessEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Reply, error)
}

type handleEventClient struct {
	cc grpc.ClientConnInterface
}

func NewHandleEventClient(cc grpc.ClientConnInterface) HandleEventClient {
	return &handleEventClient{cc}
}

func (c *handleEventClient) ProcessEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/HandleEvent/ProcessEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandleEventServer is the server API for HandleEvent service.
// All implementations must embed UnimplementedHandleEventServer
// for forward compatibility
type HandleEventServer interface {
	// handle a event
	ProcessEvent(context.Context, *Event) (*Reply, error)
	mustEmbedUnimplementedHandleEventServer()
}

// UnimplementedHandleEventServer must be embedded to have forward compatible implementations.
type UnimplementedHandleEventServer struct {
}

func (UnimplementedHandleEventServer) ProcessEvent(context.Context, *Event) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessEvent not implemented")
}
func (UnimplementedHandleEventServer) mustEmbedUnimplementedHandleEventServer() {}

// UnsafeHandleEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HandleEventServer will
// result in compilation errors.
type UnsafeHandleEventServer interface {
	mustEmbedUnimplementedHandleEventServer()
}

func RegisterHandleEventServer(s grpc.ServiceRegistrar, srv HandleEventServer) {
	s.RegisterService(&HandleEvent_ServiceDesc, srv)
}

func _HandleEvent_ProcessEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandleEventServer).ProcessEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HandleEvent/ProcessEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandleEventServer).ProcessEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

// HandleEvent_ServiceDesc is the grpc.ServiceDesc for HandleEvent service.
// It's only intended for direct use with grpc-client.RegisterService,
// and not to be introspected or modified (even as a copy)
var HandleEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HandleEvent",
	HandlerType: (*HandleEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessEvent",
			Handler:    _HandleEvent_ProcessEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "function.proto",
}
